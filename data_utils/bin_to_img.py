import multiprocessing
from tqdm import tqdm
import numpy as np
import imageio
import array
import os
from pathlib import Path


def generate_and_save_image(input_filename, output_filename, width):
    f = open(input_filename, 'rb')
    ln = os.path.getsize(input_filename)  # length of file in bytes
    if width == 0:
        width = ln
    rem = ln % width
    a = array.array("B")  # uint8 array
    a.fromfile(f, ln - rem)
    f.close()
    g = np.reshape(a, (len(a) // width, width))
    g = np.uint8(g)
    imageio.imwrite(output_filename, g)  # save the image


def convert_bin_to_img(input_, width, max_files=0):
    base_outdir = Path('binary_images/' + input_ + '_width_' + str(width)).resolve()
    base_outdir.mkdir(exist_ok=True, parents=True)

    malware_classes = os.listdir(input_)
    with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:

        jobs = []
        results = []
        total_count = 0

        for class_ in malware_classes:
            repos = os.listdir(os.path.join(input_, class_))
            count = 0
            
            for repo in repos:
                input_ = Path(input_).resolve()
                repo = Path(os.path.join(input_, class_, repo)).resolve()
                repo_base_outdir = base_outdir / repo.relative_to(Path(input_))
                repo_base_outdir.mkdir(exist_ok=True, parents=True)
                
                for file in repo.rglob('*.exe'):
                    input_fn = file.__str__()
                    outdir = repo_base_outdir / file.relative_to(repo).parent
                    outdir.mkdir(exist_ok=True, parents=True)

                    try:
                        output_fn = file.name + '.png'
                        output_path = (outdir / output_fn).__str__()
                        jobs.append(
                            pool.apply_async(generate_and_save_image, (input_fn, output_path, width)))
                        count += 1
                        if max_files > 0 and max_files == count:
                            break
                    except:
                        print('Ignoring ', filename)

                total_count += count
            tqdm_desc = 'Converting Malware bins to images for width ' + str(width)
            for job in tqdm(jobs, desc=tqdm_desc):
                results.append(job.get())
