import random
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader
from torchvision import datasets, transforms, models
from torchvision.utils import make_grid
from config import *
import numpy as np


class CNNMalware_Model1(nn.Module):
    def __init__(self, image_dim=32, num_of_classes=20):
        super().__init__()

        self.image_dim = image_dim
        self.num_of_classes = num_of_classes

        self.conv1_out_channel = 12
        self.conv1_kernel_size = 3

        self.conv2_out_channel = 16
        self.conv2_kernel_size = 3

        self.linear1_out_features = 120
        self.linear2_out_features = 90

        self.conv1 = nn.Conv2d(1, self.conv1_out_channel, self.conv1_kernel_size, stride=1,
                               padding=(2, 2))

        self.conv2 = nn.Conv2d(self.conv1_out_channel, self.conv2_out_channel, self.conv2_kernel_size, stride=1,
                               padding=(2, 2))

        self.temp = int((((self.image_dim + 2) / 2) + 2) / 2)

        self.fc1 = nn.Linear(self.temp * self.temp * self.conv2_out_channel, self.linear1_out_features)
        self.fc2 = nn.Linear(self.linear1_out_features, self.linear2_out_features)
        self.fc3 = nn.Linear(self.linear2_out_features, self.num_of_classes)

    def forward(self, X):
        # Training
        X = F.relu(self.conv1(X))
        X = F.max_pool2d(X, 2, 2)
        X = F.relu(self.conv2(X))
        X = F.max_pool2d(X, 2, 2)
        # Classifier
        X = X.view(-1, self.temp * self.temp * self.conv2_out_channel)
        X = F.relu(self.fc1(X))
        X = F.relu(self.fc2(X))
        X = self.fc3(X)
        return F.log_softmax(X, dim=1)


class CNNMalware_Model2(nn.Module):
    def __init__(self, image_dim=32, num_of_classes=20):
        super().__init__()

        self.image_dim = image_dim
        self.num_of_classes = num_of_classes
        self.padding = 2
        self.conv1_out_channel = 15
        self.conv1_kernel_size = 15
        self.stride = 1
        self.conv2_out_channel = 16
        self.conv2_kernel_size = 3
        
        print('breakpoint3')

        conv1_nurons = int((self.image_dim - self.conv1_kernel_size + 2 * self.padding) / self.stride + 1)
        print(f'conv1_nurons: {conv1_nurons}')
        maxpool2d_1_nurons = int(conv1_nurons / 2)
        print(f'maxpool2d_1_nurons: {maxpool2d_1_nurons}')
        conv2_nurons = int((maxpool2d_1_nurons - self.conv2_kernel_size + 2 * self.padding) / self.stride + 1)
        print(f'conv2_nurons: {conv2_nurons}')
        maxpool2d_2_nurons = int(conv2_nurons / 2)
        print(f'maxpool2d_2_nurons: {maxpool2d_2_nurons}')

        self.linear1_in_features = int(maxpool2d_2_nurons * maxpool2d_2_nurons * self.conv2_out_channel)
        print(f'linear1_in_features: {self.linear1_in_features}')
         
        # reduce the neurons by 20% i.e. take 80% in_features
        self.linear1_out_features = int(self.linear1_in_features * 0.80)
        print(f'linear1_out_features: {self.linear1_out_features}')
        # reduce the neurons by 40%
        self.linear2_out_features = int(self.linear1_out_features * 0.60)
        print(f'linear2_out_features: {self.linear2_out_features}')
        
        print('breakpoint4')

        self.features = nn.Sequential(
            nn.Conv2d(1, self.conv1_out_channel, self.conv1_kernel_size,
                      stride=self.stride, padding=(self.padding, self.padding)),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2),
            nn.Conv2d(self.conv1_out_channel, self.conv2_out_channel, self.conv2_kernel_size,
                      stride=self.stride, padding=(self.padding, self.padding)),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2),
        )
        print('breakpoint5')
        self.classifier = nn.Sequential(
            nn.Linear(self.linear1_in_features, self.linear1_out_features),
            nn.ReLU(inplace=True),
            nn.Linear(self.linear1_out_features, self.linear2_out_features),
            nn.ReLU(inplace=True),
            nn.Linear(self.linear2_out_features, self.num_of_classes),
        )
        print('breakpoint6')

    def forward(self, x):
        x = self.features(x)
        x = torch.flatten(x, 1)
        x = self.classifier(x)
        return F.log_softmax(x, dim=1)