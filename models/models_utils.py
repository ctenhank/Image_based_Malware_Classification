from models.CnnModels import *
from data_utils.data_loaders import *
from sklearn.model_selection import GridSearchCV
import xgboost as xgb
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
import itertools



def get_deep_feedforward_expr_list(print_grid=True, simple_list=True):
    """
    ###########################################################
    Template for CNNMalware_Model1
            {
                'model_name': 'CNNMalware_Model1',
                'experiment_name': 'cnn_experiment_1',
                'batch_size': 256,
                'image_dim': 256,
                'epochs': 10,
                'lr': 0.001,
                'feature_type': FEATURE_TYPE_IMAGE
            }
    ###########################################################
    Template for CNNMalware_Model2
            {
                'model_name': 'CNNMalware_Model2',
                'experiment_name': 'cnn_experiment_1',
                'batch_size': 512,
                'image_dim': 0,
                'epochs': 10,
                'lr': 0.001,
                'feature_type': FEATURE_TYPE_IMAGE
            }
    """
    simple_list = True
    get_deep_feedforward_expr_grid = {
        'model_name': ['CNNMalware_Model5'],
        'batch_size': [256],
        'epochs': [20],
        'lr': [0.001],
        'opcode_len': [5000],
        'embedding_dim': [512],
        'n_filters': [16, 32],
        'filter_sizes': [[16, 24, 32], [32, 64, 128]],
        'dropout': [0.3],
        'feature_type': [FEATURE_TYPE_OPCODE]
    }

    if not simple_list and print_grid:
        print_line()
        print(f'Experiments Grid')
        print(get_deep_feedforward_expr_grid)
        print_line()

    if simple_list:
        get_deep_feedforward_expr_list = [
            # learning rate
            {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
             'experiment_name': 'experiment_1', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.005,
             'experiment_name': 'experiment_2', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.01,
             'experiment_name': 'experiment_3', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},

            #  batchsize
            {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
             'experiment_name': 'experiment_4', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 20, 'lr': 0.005,
             'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 20, 'lr': 0.01,
             'experiment_name': 'experiment_6', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},

            {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 10, 'lr': 0.0001,
             'experiment_name': 'experiment_7', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 10, 'lr': 0.005,
             'experiment_name': 'experiment_8', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 10, 'lr': 0.01,
             'experiment_name': 'experiment_9', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},

            {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 10, 'lr': 0.0001,
             'experiment_name': 'experiment_10', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.80},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 10, 'lr': 0.005,
             'experiment_name': 'experiment_11', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 10, 'lr': 0.01,
             'experiment_name': 'experiment_12', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.70},

            # for new dataset
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 256, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},

            # best model
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.65},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.8}

            # experiments using batch size
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 16, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_1', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_2', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_3', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 128, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_4', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 256, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_5', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},

            #  # experiments using learning rate
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 16, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_6', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_7', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_8', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 128, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_9', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 256, 'image_dim': 256, 'epochs': 20, 'lr': 0.0001,
            #  'experiment_name': 'experiment_10', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},

            # #  experiments using split_rate
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 16, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_11', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.6},
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 32, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_12', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.65},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 64, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_13', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.7},
            # {'model_name': 'CNNMalware_Model1', 'batch_size': 128, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_14', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.75},
            #  {'model_name': 'CNNMalware_Model1', 'batch_size': 256, 'image_dim': 256, 'epochs': 20, 'lr': 0.001,
            #  'experiment_name': 'experiment_15', 'feature_type': FEATURE_TYPE_IMAGE, 'split_rate': 0.80}

        ]
        return get_deep_feedforward_expr_list
    else:
        keys, values = zip(*get_deep_feedforward_expr_grid.items())
        permutations_dicts = []
        count = 1
        for v in itertools.product(*values):
            temp_dict = dict(zip(keys, v))
            temp_exp = 'experiment_' + str(count)
            temp_dict['experiment_name'] = temp_exp
            permutations_dicts.append(temp_dict)
            count += 1

        return permutations_dicts


def get_malware_experiments_list(expr_type):
    expr_list = None
    if expr_type == DEEP_FF:
        expr_list = get_deep_feedforward_expr_list()
    if expr_type == DEEP_RNN:
        expr_list = get_deep_rnn_expr_list()
    if expr_type == SHALLOW_ML:
        expr_list = get_shallow_expr_list()

    if expr_list is None:
        raise Exception('Unknown experiment type')
    else:
        return expr_list


def create_deep_image_model(model_params):
    image_dim = model_params['image_dim']
    num_of_classes = model_params['num_of_classes']
    model_name = model_params['model_name']
    # modification
    model_name = 'CNNMalware_Model1'
    # print('breakpoint2')

    model = None
    if model_name == 'CNNMalware_Model1':
        if image_dim == 0:
            raise Exception("CNNMalware_Model1 needs image_dim != 0")
        model = CNNMalware_Model1(image_dim=image_dim, num_of_classes=num_of_classes).to(device)
    if model_name == 'CNNMalware_Model2':
        if image_dim == 0:
            raise Exception("CNNMalware_Model2 needs image_dim != 0")
        model = CNNMalware_Model2(image_dim=image_dim, num_of_classes=num_of_classes).to(device)

    if model is None:
        raise Exception("Unknown Image-based model name given")
    return model

def create_conv_tl_model(model_params):
    model = None
    model_name = model_params['model_name']
    print(f'Creating model {model_name}')
    if model_name == 'resnet152':
        model = Resnet152_wrapper(model_params)
        print(model)
    if model_name == 'vgg19':
        model = VGG19_wrapper(model_params)
        print(model)
    if model is None:
        raise Exception("Unknown Model name given")
    return model